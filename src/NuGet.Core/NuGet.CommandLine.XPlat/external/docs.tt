<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Xml.XDocument" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Xml.XPath" #>
<#@ output extension=".md" #>
<#
    string MakeFormal(string optionName, string shortcut)
    {
        string formalString = null;
        if (shortcut != null)
        {
            formalString = "-" + shortcut + "|";
        }
        return formalString + "--" + optionName;
    }

    bool IsArgument(string type)
    {
        return type == "Argument";
    }

    bool IsOption(string type)
    {
        return type == "Option";
    }

    bool IsExample(string type)
    {
        return type == "Example";
    }

    bool IsSeeAlso(string type)
    {
        return type == "SeeAlso";
    }

    string GetProperty(XElement element)
    {
        switch (element.Name.LocalName)
        {
            case "SingleValueOption":
                return "Option";
            case "SwitchOption":
                return "Option";
            case "Value":
                return "Option";
            case "Argument":
                return "Argument";
            case "Example":
                return "Example";
            case "SeeAlso":
                return "SeeAlso";
            default:
                return "Unknown Element Type " + element.Name.LocalName;
        }
    }

    string GetOptionType(XElement element)
    {
        switch (element.Name.LocalName)
        {
            case "SingleValueOption":
                return "SingleValue";
            case "SwitchOption":
                return "NoValue";
            case "Value":
                return "Value";
            default:
                return "Unknown Element Type " + element.Name.LocalName;
        }
    }

    string commandFile = this.Host.ResolvePath("..\\..\\NuGet.CommandLine.XPlat\\Commands\\Commands.xml");
    XDocument commands = XDocument.Load(commandFile);

    // harvest all strings in strings.resx to string dictionary, so we can use it later in codegen.
    var stringsResXPath = @"C:\repos\n.client-commandDocsAndCli\src\NuGet.Core\NuGet.CommandLine.XPlat\Strings.resx";
    XElement resxRoot = XDocument.Load(stringsResXPath).Root;
    var stringDictionary = new Dictionary<string, string>();
    foreach (XElement data in resxRoot.Descendants())
    {
        if (data.Name.LocalName == "data")
        {
            string resName = data.Attribute(XName.Get("name", ""))?.Value;
            string value = data.XPathSelectElement("value")?.Value;
            if (resName != null && value != null)
            {
                stringDictionary.Add(resName.ToLower(), value);
            }
        }
    }
 
     // Generate command docs
     foreach (XElement verb in commands.Descendants(XName.Get("Verb","")))
     {
        string verbName = verb.Attribute(XName.Get("Name", "")).Value;
        string verbFormalName = verbName;
        foreach (XElement noun in verb.Descendants(XName.Get("Noun")))
        {
            string description = noun.Attribute(XName.Get("Description", ""))?.Value;
            string nounName = noun.Attribute(XName.Get("Name", ""))?.Value;
            string nounFormalName = nounName;
            string version = noun.Attribute(XName.Get("Version", ""))?.Value;

            // calculate commandSyntax
            var commandSyntaxBuilder = new StringBuilder();
            commandSyntaxBuilder.AppendFormat("{0} {1}", verbFormalName, nounFormalName);
            foreach (XElement option in noun.Descendants())
            {
                string optionName = option.Attribute(XName.Get("Name", ""))?.Value;
                string shortcut = option.Attribute(XName.Get("Shortcut", ""))?.Value;
                string optionType = option.Attribute(XName.Get("Type", ""))?.Value;
                string optionLongName = option.Attribute(XName.Get("LongName", ""))?.Value;
                string helpText = option.Attribute(XName.Get("Help", ""))?.Value;
                string optionFormalName = MakeFormal(optionName, shortcut);
                bool required =false;
                 //option.Attribute(XName.Get("Required", ""))?.Value == "true";

                if (IsArgument(GetProperty(option)))
                {
                    commandSyntaxBuilder.Append(optionLongName != null ? " " + optionLongName.ToUpper() : " " + optionName.ToUpper());
                }
                else if (IsOption(GetProperty(option)))
                {
                    commandSyntaxBuilder.Append(!required ? " [" : " ");
                    commandSyntaxBuilder.Append(optionLongName != null ? "--" + optionLongName.ToLower() : "--" + optionName.ToLower());
                    commandSyntaxBuilder.Append(!required ? "]" : "");
                }
            }

            string commandSyntax = commandSyntaxBuilder.ToString();
#>
    

---
title: dotnet nuget <#= verbFormalName #> <#= nounFormalName #> command
description: The `dotnet nuget <#= verbFormalName #> <#= nounFormalName #>` command <#= description #> 
author: nugetClient
ms.date: <#= DateTime.Now.ToString("d") #>
---
# dotnet nuget <#= verbFormalName #> <#= nounFormalName #>

**This article applies to:** ✔️ .NET Core <#= version#> SDK and later versions

## Name

`dotnet nuget <#= verbFormalName #> <#= nounFormalName #>` - <#= stringDictionary[(verbFormalName+nounFormalName+"CommandDescription").ToLower()] #>

## Synopsis

```dotnetcli
`dotnet nuget <#= commandSyntax #>`
`dotnet nuget <#= verbFormalName #> <#= nounFormalName #> [-h|--help]`
```

## Description

The `dotnet nuget <#= verbFormalName #> <#= nounFormalName #>` command <#= description #> 

<#
            var headerForArgumentsShown = false;
            var headerForOptionsShown = false; 
            var headerForExamplesShown = false; 
            var headerForSeeAlsosShown = false;
            foreach (XElement option in noun.Descendants())
            {
                string optionName = option.Attribute(XName.Get("Name", ""))?.Value;
                string shortcut = option.Attribute(XName.Get("Shortcut", ""))?.Value;
                string optionType = option.Attribute(XName.Get("Type", ""))?.Value;
                string optionLongName = option.Attribute(XName.Get("LongName", ""))?.Value;
                string helpText = option.Attribute(XName.Get("Help", ""))?.Value;
                if (IsArgument(GetProperty(option)))
                {
                    if (optionLongName != null)
                    {
                        if (!headerForArgumentsShown)
                        {
#>
## Arguments
<#
                            headerForArgumentsShown = true;
                        }
#>
- **`<#= optionLongName.ToUpper() #>`**

  <#= stringDictionary[helpText.ToLower()] #>

<#
                    }
                    else
                    {
                        if (!headerForArgumentsShown)
                        {
#>
## Arguments
<#
                            headerForArgumentsShown = true;
                        }
#>
- **`<#= optionName.ToUpper() #>`**

  <#= stringDictionary[helpText.ToLower()] #>

<#
                    }
                }
                else if (IsExample(GetProperty(option)))
                {
                    string titleText = option.Attribute(XName.Get("Title", ""))?.Value;
                    string commandText = option.Attribute(XName.Get("Command", ""))?.Value;
                    if (!headerForExamplesShown)
                    {
#>
## Examples
<#
                        headerForExamplesShown = true;
                    }
#>

- <#= titleText #>

  ```dotnetcli
  <#= commandText #>
  ```
<#
                }
                else if (IsSeeAlso(GetProperty(option)))
                {
                    string titleText = option.Attribute(XName.Get("Title", ""))?.Value;
                    string urlText = option.Attribute(XName.Get("Url", ""))?.Value;
                    if (!headerForSeeAlsosShown)
                    {
#>
## See also
<#
                        headerForSeeAlsosShown = true;
                    }
#>

- [<#= titleText #>](<#= urlText #>)

<#
                }
                else
                {
                    string optionFormalName = MakeFormal(optionName, shortcut);
                    switch (GetOptionType(option))
                    {
                    case "SingleValue":
                        if (!headerForOptionsShown)
                        {
#>
## Options
<#
                            headerForOptionsShown = true;
                        }
#>
- **`<#= optionFormalName #>`**

  <#= stringDictionary[helpText.ToLower()] #>

<#
                        break;
                    case "NoValue":
                        if (!headerForOptionsShown)
                        {
#>
## Options
<#
                            headerForOptionsShown = true;
                        }
#>
- **`<#= optionFormalName #>`**

  <#= stringDictionary[helpText.ToLower()] #>

<#
                        break;
                    case "Value":
                        if (!headerForOptionsShown)
                        {
#>
## Options
<#
                            headerForOptionsShown = true;
                        }
#>
- **`<#= optionFormalName #>`**

  <#= stringDictionary[helpText.ToLower()] #>

<#
                        break;
                    }
                }
            }
        }
    }
#>}
